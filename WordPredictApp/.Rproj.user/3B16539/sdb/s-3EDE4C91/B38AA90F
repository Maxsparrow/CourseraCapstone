{
    "contents" : "\n# This is the server logic for a Shiny web application.\n# You can find out more about building applications with Shiny here:\n#\n# http://shiny.rstudio.com\n#\n\nlibrary(shiny)\n\ndirpath<-\"Data Scientist Specialization/CourseraCapstone/\"\nrawfilepath<-\"final/en_US/\"\n\nfindtop<-function(filtered,top) {\n    if(NROW(filtered)>0) counts<-aggregate(predictor~output,data=filtered,length)\n    else return(NA)    \n    colnames(counts)[2]<-\"count\"\n    counts<-counts[order(-counts$count),]\n    counts<-head(counts,top)\n    counts$perc<-round(counts$count/sum(counts$count),2)\n    return(subset(counts,select=-count))    \n}\n\nfindoutput<-function(ngrams,input,top) {\n    input<-tolower(input)\n    filtered<-ngrams[ngrams$predictor==input,]\n    return(findtop(filtered,top))\n}\n\n##Not using currently, too inaccurate, consider lowing jw score limit\nfuzzyoutput<-function(ngrams,input,top) {\n    scores<-stringdist(ngrams$predictor,input,method=\"jw\",p=0.1)\n    filtered<-ngrams[scores<0.06,]\n    return(findtop(filtered,top))\n}\n\ninputreducer<-function(input) {\n    splitinput<-strsplit(input,\" \")[[1]]\n    if(length(splitinput)==1) return(NA)\n    input<-paste(splitinput[2:length(splitinput)],collapse=\" \")\n    return(input)\n}\n\nloopfindoutput<-function(input) {\n    tempinput<-strsplit(input,\" \")[[1]]\n    if(length(tempinput)>3) {\n        print(\"Too many words, using last 3 words for input\")\n        input<-paste(tempinput[(length(tempinput)-2):length(tempinput)],collapse=\" \")\n    }\n    \n    runcount<-0\n    repeat{\n        runcount<-runcount+1\n        print(paste(\"run number:\",runcount))\n        print(paste(\"current input:\",input))\n        \n        numwords<-length(strsplit(input,\" \")[[1]])             \n        ngrams<-read.table(paste0(dirpath,numwords+1,\"grams.txt\"))  \n        \n        results<-ngrams[ngrams$predictor==input,\"output\"]      \n        \n        if(length(results)==1) return(results)\n        else input<-inputreducer(input)\n        if(is.na(input)) {\n            print(\"Cannot reduce input any further. No prediction found\")\n            #fuzzyoutput?\n            return(NA)\n        }\n    }\n}\n\nshinyServer(function(input, output) {\n\n  output$distPlot <- renderPlot({\n\n    # generate bins based on input$bins from ui.R\n    x    <- faithful[, 2]\n    bins <- seq(min(x), max(x), length.out = input$bins + 1)\n\n    # draw the histogram with the specified number of bins\n    hist(x, breaks = bins, col = 'darkgray', border = 'white')\n\n  })\n\n})\n",
    "created" : 1430001382959.000,
    "dirty" : true,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1217141419",
    "id" : "B38AA90F",
    "lastKnownWriteTime" : 1415276870,
    "path" : "~/Data Scientist Specialization/CourseraCapstone/WordPredictApp/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}